{"version":3,"sources":["js/03-promises.js"],"names":["refs","firstDelay","document","querySelector","delayStep","amount","button","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","onFormSubmit","e","preventDefault","Number","value","step","i","newDelay","console","log","then","alert","catch","addEventListener"],"mappings":";AACA,MAAMA,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,OAAQH,SAASC,cAAc,wBAC/BG,OAAQJ,SAASC,cAAc,WAGjC,SAASI,EAAcC,EAAUC,GACxB,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EAEFF,EAAQ,CAACH,SAAAA,EAAUC,MAAAA,IAGnBG,EAAO,CAACJ,SAAAA,EAAUC,MAAAA,KAEnBA,KAIP,MAAMQ,EAAeC,IACnBA,EAAEC,iBAEIV,MAAAA,EAAQW,OAAOpB,EAAKC,WAAWoB,OAC/BC,EAAOF,OAAOpB,EAAKI,UAAUiB,OAC7BhB,EAASe,OAAOpB,EAAKK,OAAOgB,OAE7B,IAAA,IAAIE,EAAI,EAAGA,GAAKlB,EAAQkB,GAAK,EAAG,CAC7BC,MAAAA,EAAWf,EAAQa,GAAQC,EAAI,GACpCE,QAAQC,IAAI,CAAEH,EAAAA,EAAGC,SAAAA,IAClBjB,EAAcgB,EAAGC,GACdG,KAAK,EAAGnB,SAAAA,EAAUC,MAAAA,MAEjBmB,2BAA2BpB,QAAeC,SAE3CoB,MAAM,EAAGrB,SAAAA,EAAUC,MAAAA,MAElBmB,0BAA0BpB,QAAeC,WAIjDT,EAAKM,OAAOwB,iBAAiB,QAASb","file":"03-promises.9f1e0888.js","sourceRoot":"../src","sourcesContent":["\nconst refs = {\n  firstDelay: document.querySelector(\"input[name='delay']\"),\n  delayStep: document.querySelector(\"input[name='step']\"),\n  amount: document.querySelector(\"input[name='amount']\"),\n  button: document.querySelector(\"button\"),\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({position, delay});\n      } else {\n        // Reject\n        reject({position, delay});\n      }\n    }, delay);\n  });\n}\n\nconst onFormSubmit = e => {\n  e.preventDefault();\n\n  const delay = Number(refs.firstDelay.value);\n  const step = Number(refs.delayStep.value);\n  const amount = Number(refs.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    const newDelay = delay + step * (i - 1);\n     console.log({ i, newDelay });\n    createPromise(i, newDelay)\n      .then(({ position, delay }) => {\n        //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        alert(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        alert(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n};\nrefs.button.addEventListener('click', onFormSubmit);"]}